1) 이클립스 market place에서 spring 프레임워크 다운로드
2) perspective 중 spring 선택

<생성단계>
Wizard에서 Spring Legacy Project 선택

프로젝트명 입력
Templages에서 Spring MVC 프로젝트 선택

프로젝트 패키지명 입력(.으로 구분된 최소 3단계의 패키지명 필요)

pom.xml에서 기본 설정 및 필요한 파일을 자동 다운로드하도록 설정할 수 있음(띄어쓰기 하지 말기!)
- 자바 1.8버전
- springframework 5.0.1
- 추가 다운로드 링크는 dependencies 태그 내 추가 (다운로드 링크는 mvn, gradle에서 가져온다)

<작업 파일 생성>
webapp : 클라이언트가 요청하는 jsp 저장
webapp> WEB_INF> views: 서버가 요청하는 jsp 저장 (Controller 실행 후 이동하는 jsp
src/main/java> 생성한패키지 내: HomeController를 포함한 java 파일 저장

<파일 Flow>
1. webapp 아래에 있는 jsp 페이지는 클라이언트만 요청할 수 있다
(jsp 페이지만 올 수 있다, html은 안됨!)

2. 클라이언트가 브라우저를 통해서 요청을 하게 된다
(me.jsp 호출)

3. 서버에서는 클라이언트가 요청한 me.jsp를 webapp아래에서 찾음

4. 찾은 jsp페이지를 실행시킨 후, html을 만든다.
이 html을 브라우저에 전송한다.

5. 브라우저가 바은 html을 실행시킴. 화면에 html이 나타남.

6. form에 입력 후, 입력한 데이터를 서버에 주면수 서버에 요청을 해야 함

7. 서버에서는 클라이언트가 입력한 정보를 받아서 (dto를 만든 후 넣어야 하고), 받은 데이터를 db에 넣는 처리를 해야 함

8. 받아서 db 처리하는 부분은 controller에 구현한다

9. 컨트롤러를 사용해야 하는 요청은 가상의 주소를 만들어서 요청해야 한다

10. controller 안에 @requestMapping 중에서 가상의 주소와 맵핑되는 내용을 찾아서 그 아래에 있는 메서드를 호출한다

11. 메서드 안에 dto 변수를 입력파라미터로 설정해두면 dto를 자동으로 만들어서 (setter 있는 경우에만) 서버에서 받은 값들을 dto에 다 넣어준다

12. DB 처리하는 경우, DTO를 입력값으로 처리한다

13. 처리결과를 클라이언트에게 알려주기 위해 views 하단에 (요청 주소와 동일한 이름의-@requestMapping) jsp파일을 만들어두면, 자동호출된다

14. views/파일명.jsp를 힐행 수 html을 만들어서 클라이언트에 응답한다.
